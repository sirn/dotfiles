#!/bin/sh
#
# Collection of commands to perform Firefox maintenance tasks.
#

# shellcheck disable=SC2034
BASE_DIR=$(cd "$(dirname "$0")/.." || exit; pwd -P)
BASE_NAME=$(basename "$0")
PATH=/usr/bin:/bin:/usr/local/bin

TMP_DIR=$(mktemp -d)
trap 'rm -rf $TMP_DIR' 0 1 2 3 6 14 15

PROFILE_SEARCH="
$HOME/.mozilla/firefox
$HOME/.var/app/org.mozilla.firefox/.mozilla/firefox
/mnt/c/Users/$(id -un)/AppData/Roaming/Mozilla/Firefox/Profiles
" # END-QUOTE

PROFILE_PRIORITY="
default-beta
default-default
default-release
default
" # END-QUOTE


## Utils
##

_detect_firefox_profile() {
    if [ -n "$FIREFOX_PROFILE" ]; then
        printf "%s" "$FIREFOX_PROFILE"
        return 0
    fi

    for path in $PROFILE_SEARCH; do
        for suffix in $PROFILE_PRIORITY; do
            for p in "$path"/*".$suffix"; do
                if [ -d "$p" ]; then
                    printf "%s" "$p"
                    return 0
                fi
            done
        done
    done

    return 1
}


## Command: cad-export
## Command: cad-import
## Intelligently convert Cookie AutoDelete export files to use container
## names instead of an ID (and vice versa)
##

_cad_conv() {
    profile=$(_detect_firefox_profile)

    if [ -z "$profile" ]; then
        printf "%s: could not found Firefox profile\\n" "$BASE_NAME"
        return 1
    fi

    mode=$1
    cad_json=$2
    containers_json="$profile"/containers.json

    if [ -z "$cad_json" ] || [ ! -f "$cad_json" ]; then
        printf "%s: Cookie AutoDelete JSON could not be found\\n" "$BASE_NAME"
        return 1
    fi

    if [ ! -f "$containers_json" ]; then
        printf "%s: Firefox Containers not available in profile\\n" "$BASE_NAME"
        return 1
    fi

    if ! command -v jq >/dev/null; then
        printf "%s: jq is required to run this utility\\n" "$BASE_NAME"
        return 1
    fi

    case "$mode" in
        "cadtoclean" )
            # Convert CAD JSON file and replace all instances of
            # firefox-containers-id with a container name ready to be shared
            # between multiple machines (import via cleantocad).
            jq -M -s '
                .[0] as $cad |
                .[1].identities |
                . + [{"userContextId": "default", "name": "default"}] |
                reduce .[] as $i (
                    {};
                    "firefox-container-\($i.userContextId)" as $contextId |
                    .[$i.name] += [
                        $cad | .[] | .[] |
                        select(.storeId == $contextId) |
                        reduce . as $s (
                            [];
                            . + [$s | with_entries(
                                    if .key == "storeId" then
                                        .value |= $i.name
                                    else
                                        .
                                    end
                            )]
                        ) | .[]
                    ]
                )
            ' "$cad_json" "$containers_json"
            ;;

        "cleantocad" )
            # Convert a cleaned CAD JSON file created from cadtoclean and
            # replace container names to firefox-containers-id to be imported
            # into Firefox via CAD addons.
            jq -M -s '
                .[0] as $cad |
                .[1].identities |
                . + [{"userContextId": "default", "name": "default"}] |
                reduce .[] as $i (
                    {};
                    "firefox-container-\($i.userContextId)" as $contextId |
                    .[$contextId] += [
                        $cad | .[] | .[] |
                        select(.storeId == $i.name) |
                        reduce . as $s (
                            [];
                            . + [$s | with_entries(
                                    if .key == "storeId" then
                                        .value |= $contextId
                                    else
                                        .
                                    end
                            )]
                        ) | .[]
                    ]
                )
            ' "$cad_json" "$containers_json"
            ;;
    esac
}

_do_cad_export() {
    _cad_conv cadtoclean "$@"
}

_do_cad_import() {
    _cad_conv cleantocad "$@"
}


## Running
##

cmd=$(printf "%s" "$1" | tr -C '[:alnum:]' '_')

if [ -z "$cmd" ]; then
    printf >&2 "Usage: %s COMMAND

A wrapper script to perform Firefox maintenance tasks.

COMMAND:

    cad-import          reconcile Cookie AutoDelete for portable export
    cad-export          reconcile Cookie AutoDelete for portable import

" "$BASE_NAME"
    exit 2
fi

if [ "$(command -v "_do_${cmd}")x" = "x" ]; then
    printf >&2 "%s: unknown command %s\\n" "$BASE_NAME" "$cmd"
    exit 1
fi

shift
"_do_${cmd}" "$@"
exit $?
