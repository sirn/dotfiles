#!/usr/bin/env nix-shell
#!nix-shell -i bash -p coreutils
set -o pipefail

PROG=$(basename "$0")

## Messages
## -----------------------------------------------------------------------------

c_blue=$(tput setaf 4 2>/dev/null || true)
c_bold=$(tput bold 2>/dev/null || true)
c_yellow=$(tput setaf 3 2>/dev/null || true)
c_red=$(tput setaf 1 2>/dev/null || true)
c_reset=$(tput sgr0 2>/dev/null || true)
c_white=$(tput setaf 7 2>/dev/null || true)

msg() {
    printf >&2 "%s[%s]%s %s\\n" \
        "$c_blue" "$PROG" "$c_reset" \
        "$*"
}

case "$LOGLEVEL" in
debug)
    LOGLEVEL_I=0
    ;;
warn | warning)
    LOGLEVEL_I=2
    ;;
error)
    LOGLEVEL_I=3
    ;;
*) # Info
    LOGLEVEL_I=1
    ;;
esac

if [ "$LOGLEVEL_I" -lt 1 ]; then
    msg_debug() {
        printf >&2 "%s[%s]%s %sDEBUG:%s %s\\n" \
            "$c_blue" "$PROG" "$c_reset" \
            "$c_bold" "$c_reset" "$*"
    }
else
    msg_debug() {
        :
    }
fi

if [ "$LOGLEVEL_I" -lt 2 ]; then
    msg_info() {
        printf >&2 "%s[%s]%s %sINFO: %s%s\\n" \
            "$c_blue" "$PROG" "$c_reset" \
            "$c_white" "$*" "$c_reset"
    }

    msg_info_verbose() {
        if [ "$VERBOSE" = "1" ]; then
            printf >&2 "%s[%s]%s %sVERBOSE: %s%s\\n" \
                "$c_blue" "$PROG" "$c_reset" \
                "$c_white" "$*" "$c_reset"
        fi
    }
else
    msg_info() {
        :
    }

    msg_info_verbose() {
        :
    }
fi

if [ "$LOGLEVEL_I" -lt 3 ]; then
    msg_warn() {
        printf >&2 "%s[%s]%s %sWARNING: %s%s\\n" \
            "$c_blue" "$PROG" "$c_reset" \
            "$c_yellow" "$*" "$c_reset"
    }
else
    msg_warn() {
        :
    }
fi

if [ "$LOGLEVEL_I" -lt 4 ]; then
    msg_error() {
        printf >&2 "%s[%s]%s %sERROR: %s%s\\n" \
            "$c_blue" "$PROG" "$c_reset" \
            "$c_red" "$*" "$c_reset"
    }
else
    msg_error() {
        :
    }
fi

## Subroutines
## -----------------------------------------------------------------------------

_sync_jj_git() {
    repo=$1
    git -C "${repo}" config --unset core.bare
    jj -R "${repo}" new
    jj -R "${repo}" undo
}

_write_git_target() {
    repo=$1
    echo -n "../../../.git" >"${repo}/.jj/repo/store/git_target"
}

_relocate() {
    repo=$1
    if [ -z "$repo" ]; then
        return 1
    fi

    msg "Processing ${repo}"

    if [ ! -d "${repo}" ]; then
        msg_info "Stale cache, skipping"
        return 2
    fi

    if [ ! -d "${repo}/.jj" ]; then
        msg_info "Not a Jujutsu repo, skipping"
        return 2
    fi

    if [ -d "${repo}/.git" ]; then
        if [ -f "${repo}/.jj/repo/store/git_target" ] &&
             [ "$(cat "${repo}/.jj/repo/store/git_target")" != "../../../.git" ]; then
            msg_info "Already relocated but invalid git_target, fixing"
            _write_git_target "${repo}"
            _sync_jj_git "${repo}"
            return 0
        fi

        if [ "$(git -C "${repo}" config core.bare)" = "true" ]; then
            msg_info "Repo still set to bare, fixing"
            _sync_jj_git "${repo}"
            return 0
        fi

        msg_info "Already relocated, skipping"
        return 2
    fi

    if [ ! -d "${repo}/.jj" ]; then
        msg_info "Not a Jujutsu repo, skipping"
        return 2
    fi

    if [ ! -f "${repo}/.jj/.gitignore" ] || grep -qv "/*" "${repo}/.jj/.gitignore"; then
        msg_info "No rules in .jj/.gitignore, writing"
        echo "/*" >>"${repo}/.jj/.gitignore"
    fi

    if [ -d "${repo}/.jj/repo/store/git" ]; then
        msg_info "Relocating git store"
        mv "${repo}/.jj/repo/store/git" "${repo}/.git"
    fi

    if [ -f "${repo}/.jj/repo/store/git_target" ]; then
        msg_info "Rewriting git store"
        _write_git_target "${repo}"
        _sync_jj_git "${repo}"
    fi

    return 0
}

## Main
## -----------------------------------------------------------------------------

main() {
    if [ -z "$*" ]; then
        pom list | while read -r repo; do
            if ! _relocate "$repo"; then
                continue
            fi
        done
    fi

    _relocate "$@"
}

main "$@"
