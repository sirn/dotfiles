#!/bin/sh
#
# Project Organizing Manifold
# Manages a project directory.
#

POM_ROOTS=
POM_ROOT=
POM_SEARCHDEPTH=${POM_SEARCHDEPT:-3}

POM_DEBUG=${POM_DEBUG:-0}
POM_DRYRUN=${POM_DRYRUN:-0}
POM_DATADIR=
POM_CACHE=

PROG=$(basename "$0")

## Messages
## -----------------------------------------------------------------------------

c_blue=$(tput setaf 4 2>/dev/null || true)
c_bold=$(tput bold 2>/dev/null || true)
c_yellow=$(tput setaf 3 2>/dev/null || true)
c_red=$(tput setaf 1 2>/dev/null || true)
c_reset=$(tput sgr0 2>/dev/null || true)
c_white=$(tput setaf 7 2>/dev/null || true)

msg() {
    printf >&2 "%s[%s]%s %s\\n" \
        "$c_blue" "$PROG" "$c_reset" \
        "$*"
}

msg_notice() {
    printf >&2 "%s[%s]%s %sNOTICE: %s%s\\n" \
        "$c_blue" "$PROG" "$c_reset" \
        "$c_white" "$*" "$c_reset"
}

msg_warn() {
    printf >&2 "%s[%s]%s %sWARNING: %s%s\\n" \
        "$c_blue" "$PROG" "$c_reset" \
        "$c_yellow" "$*" "$c_reset"
}

msg_error() {
    printf >&2 "%s[%s]%s %sERROR: %s%s\\n" \
        "$c_blue" "$PROG" "$c_reset" \
        "$c_red" "$*" "$c_reset"
}

msg_debug() {
    if [ "$POM_DEBUG" = "1" ]; then
        printf >&2 "%s[%s]%s %sDEBUG:%s %s\\n" \
            "$c_blue" "$PROG" "$c_reset" \
            "$c_bold" "$c_reset" "$*"
    fi
}

cmd_run_nd() {
    msg_debug "Command [no dry-run]: $*"
    RET=0
    "$@" 2>/dev/null
    RET=$?
    msg_debug "Command exit: $RET"
    return $RET
}

cmd_run() {
    msg_debug "Command: $*"

    RET=0
    if [ "$POM_DRYRUN" = "1" ]; then
        echo >&2 "$@"
    else
        "$@"
        RET=$?
    fi

    msg_debug "Command exit: $RET"
    return $RET
}

## Internal
## -----------------------------------------------------------------------------

pom_cache_update() {
    OLDIFS=$IFS
    IFS=:
    # This is one of the few situations where unescaped var is valid.
    # https://github.com/koalaman/shellcheck/issues/2335
    # shellcheck disable=SC2086
    set -- $POM_ROOTS
    IFS=$OLDIFS

    msg_debug "Search dirs: $*"
    find "$@" \
        -maxdepth "$POM_SEARCHDEPTH" \
        -exec test -d '{}'/.git \; \
        -print \
        -prune 2>/dev/null |
        sort -u >"$POM_CACHE".new
    msg_debug "Reloaded directories into $POM_CACHE".new

    mv "$POM_CACHE".new "$POM_CACHE"
    msg_debug "Renamed ${POM_CACHE}.new into $POM_CACHE"
}

## pom git
## -----------------------------------------------------------------------------

pom_git_clone() {
    if [ "$#" -lt 1 ]; then
        pom_git_help "$@"
        exit 1
    fi

    POM_GIT_REPO=$1
    shift

    POM_GIT_REPO_DIR=$(
        echo "$POM_GIT_REPO" |
            sed -E 's|^.*://||;
                    s|^.*@||;
                    s|:[0-9]+/|/|;
                    s|:|/|;
                    s|.hg$||;
                    s|.git$||'
    )

    msg_debug "env POM_GIT_REPO=$POM_GIT_REPO"
    msg_debug "env POM_GIT_REPO_DIR=$POM_GIT_REPO_DIR"

    OLDIFS=$IFS
    IFS=:
    for n in $POM_ROOTS; do
        msg_debug "Searching $n/$POM_GIT_REPO_DIR"

        if [ -d "$n/$POM_GIT_REPO_DIR" ] && [ ! -d "$n/$POM_GIT_REPO_DIR/.git" ]; then
            msg_error "$n/$POM_GIT_REPO_DIR already exists but is not a Git directory."
            exit 1
        fi

        if [ -d "$n/$POM_GIT_REPO_DIR" ]; then
            msg "$n/$POM_GIT_REPO_DIR already exists"
            exit 0
        fi
    done
    IFS=$OLDIFS

    RET=0
    POM_GIT_REPO_ROOT=$POM_ROOT/$POM_GIT_REPO_DIR
    cmd_run mkdir -p "$POM_GIT_REPO_ROOT"
    cmd_run git clone --recurse-submodules "$POM_GIT_REPO" "$POM_GIT_REPO_ROOT" || RET=$?

    # Clone failed
    if [ "$RET" != "0" ]; then
        rmdir "$POM_GIT_REPO_DIR" 2>/dev/null || true
        msg_error "Failed to clone $POM_GIT_REPO into $POM_GIT_REPO_ROOT"
        exit 1
    fi

    pom_cache_update
    msg "Successfully cloned $POM_GIT_REPO into $POM_GIT_REPO_ROOT"
}

pom_git_pull_all() {
    pom_git_run_all -w -s pull
}

pom_git_run_all() {
    if [ "$#" -lt 1 ]; then
        pom_git_help "$@"
        exit 1
    fi

    OPTIND=1
    POM_GIT_RUN_ALL_CHECK_WORKDIR=0
    POM_GIT_RUN_ALL_BRANCHES=""

    while getopts "b:sw" opt; do
        case "$opt" in
        b)
            POM_GIT_RUN_ALL_BRANCHES="$POM_GIT_RUN_ALL_BRANCHES $OPTARG"
            ;;
        s)
            POM_GIT_RUN_ALL_BRANCHES="$POM_GIT_RUN_ALL_BRANCHES main master"
            POM_GIT_RUN_ALL_CHECK_WORKDIR=1
            ;;
        w)
            POM_GIT_RUN_ALL_CHECK_WORKDIR=1
            ;;
        *) ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ "${1:-}" = "--" ]; then
        shift
    fi

    # Do it again to check if there's a command provided
    if [ "$#" -lt 1 ]; then
        pom_git_help "$@"
        exit 1
    fi

    msg_debug "env POM_GIT_RUN_ALL_CHECK_WORKDIR=$POM_GIT_RUN_ALL_CHECK_WORKDIR"
    msg_debug "env POM_GIT_RUN_ALL_BRANCHES=$POM_GIT_RUN_ALL_BRANCHES"

    if [ "${1:-}" = "git" ]; then
        msg_warn "Stripping \`git' from a command prefix"
        shift
    fi

    while read -r p; do
        if [ "$POM_GIT_RUN_ALL_CHECK_WORKDIR" = "1" ]; then
            GIT_STATUS=$(cmd_run_nd git -C "$p" status --porcelain=v2) || RET=$?
            if [ "$GIT_STATUS" != "" ]; then
                msg "Skipping $p: workdir is dirty (-w)"
                continue
            fi
        fi

        if [ "$POM_GIT_RUN_ALL_BRANCHES" != "" ]; then
            GIT_HEAD=$(cmd_run_nd git -C "$p" rev-parse --abbrev-ref HEAD)
            MATCHED=0
            msg_debug "Repository head is $GIT_HEAD"
            for b in $POM_GIT_RUN_ALL_BRANCHES; do
                if [ "$GIT_HEAD" = "$b" ]; then
                    msg_debug "Repository head $GIT_HEAD matched"
                    MATCHED=1
                fi

                if [ "$MATCHED" = "1" ]; then
                    continue
                fi
            done

            if [ "$MATCHED" != "1" ]; then
                msg "Skipping $p: $GIT_HEAD is not in branch allowed list (-b)"
                continue
            fi
        fi

        msg "Running git -C $p $*"

        RET=0
        cmd_run git -C "$p" "$@" || RET=$?

        if [ "$RET" != "0" ]; then
            msg_warn "The command returned status $RET"
        fi
    done <"$POM_CACHE"
}

pom_git_help() {
    cat >&2 <<EOF
Usage: $PROG git [SUBCOMMAND...]

Run Git commands inside POM root or POM project directory.

SUBCOMMANDS:

    clone REPO
        Clone a repository into POM root

    pull-all
        Alias of \`run-all -w -s pull'

    run-all [OPTIONS...] CMD
        Run arbitary Git command in every POM projects

        OPTIONS:

            -b BRANCH_NAME
                Only runs if HEAD matches BRANCH_NAME

            -s
                Alias of \`-b main -b master'

            -w
                Only runs if worktree is not dirty

EOF
}

pom_git() {
    POM_SUBCOMMAND=
    if [ "$#" -gt 0 ] && [ "${*#-*}" = "$*" ]; then
        POM_SUBCOMMAND=$1
        shift
        msg_debug "POM_SUBCOMMAND: $POM_SUBCOMMAND"
    fi

    case "$POM_SUBCOMMAND" in
    clone)
        pom_git_clone "$@"
        ;;
    pull-all)
        pom_git_pull_all "$@"
        ;;
    run-all)
        pom_git_run_all "$@"
        ;;
    help)
        pom_git_help "$@"
        ;;
    *)
        pom_git_help "$@"
        exit 2
        ;;
    esac
}

## pom help
## -----------------------------------------------------------------------------

pom_help() {
    cat >&2 <<EOF
Usage: $PROG COMMAND [SUBCOMMAND...] [OPTIONS...]

Run \`$PROG COMMAND help' for further subcommands.

COMMAND:

    git
        Run a Git command within POM root

    help
        Prints this help

    list
        List projects from cache

    sync
        Synchronizes project cache with POM root

EOF
}

## pom list
## -----------------------------------------------------------------------------

pom_list_print() {
    cat "$POM_CACHE"
}

pom_list_help() {
    cat >&2 <<EOF
Usage: $PROG list [SUBCOMMAND...] [OPTIONS...]

List all projects within POM root when called without any subcommands.

SUBCOMMANDS:

    (empty)
        Prints the list of known projets

        OPTIONS:

            -u
                Updates cache (similar to running $PROG sync)

    help
        Prints this help

EOF
}

pom_list() {
    POM_SUBCOMMAND=
    if [ "$#" -gt 0 ] && [ "${*#-*}" = "$*" ]; then
        POM_SUBCOMMAND=$1
        shift
        msg_debug "env POM_SUBCOMMAND=$POM_SUBCOMMAND"
    fi

    while getopts "u" opt; do
        case "$opt" in
        u) POM_LIST_UPDATE=1 ;;
        *) ;;
        esac
    done

    case "$POM_SUBCOMMAND" in
    "")
        [ "$POM_LIST_UPDATE" = 1 ] && pom_cache_update
        pom_list_print "$@"
        ;;
    help)
        pom_list_help "$@"
        ;;
    *)
        pom_list_help "$@"
        exit 2
        ;;
    esac
}

## pom sync
## -----------------------------------------------------------------------------

pom_sync() {
    pom_cache_update
    msg "Successfully synced."
}

## Entrypoint
## -----------------------------------------------------------------------------

main() {
    if ! command -v git >/dev/null; then
        msg "git is required to be installed"
        exit 1
    fi

    POM_ROOTS=$(
        cmd_run_nd git config --get-all --path pom.root | while read -r p; do
            printf "%s:" "$p"
        done
    )

    POM_ROOTS=${POM_ROOTS%%:}
    POM_ROOT=${POM_ROOTS%%:*}
    POM_DATADIR=${POM_ROOT}/.pom
    POM_CACHE=${POM_DATADIR}/cache

    msg_debug "env POM_ROOTS=$POM_ROOTS"
    msg_debug "env POM_ROOT=$POM_ROOT"
    msg_debug "env POM_SEARCHDEPTH=$POM_SEARCHDEPTH"
    msg_debug "env POM_DATADIR=$POM_DATADIR"
    msg_debug "env POM_CACHE=$POM_CACHE"

    POM_COMMAND=
    if [ "$#" -gt 0 ]; then
        POM_COMMAND=$1
        shift
        msg_debug "env POM_COMMAND=$POM_COMMAND"
    fi

    if [ ! -d "$POM_DATADIR" ]; then
        mkdir -p "$POM_DATADIR"
        msg_debug "Creating cache directory"
    fi

    case "$POM_COMMAND" in
    git)
        pom_git "$@"
        ;;
    help)
        pom_help "$@"
        ;;
    list)
        pom_list "$@"
        ;;
    sync)
        pom_sync "$@"
        ;;
    *)
        pom_help "$@"
        exit 2
        ;;
    esac
}

main "$@"
