#!/bin/sh
#
# Collection of commands to perform xbps maintenance tasks.
#

# shellcheck disable=SC2034
BASE_DIR=$(cd "$(dirname "$0")/.." || exit; pwd -P)
BASE_NAME=$(basename "$0")
PATH=/usr/bin:/bin:/usr/local/bin

TMP_DIR=$(mktemp -d)
trap 'rm -rf $TMP_DIR' 0 1 2 3 6 14 15

T_BOLD="$(tput bold 2>/dev/null || true)"
T_RESET="$(tput sgr0 2>/dev/null || true)"


## Utils
##

version_gte() {
    left=$1; shift
    right=$1; shift

    # https://havoc.io/post/shellsemver/
    min_ver=$(printf "%s\\n%s" "$left" "$right" |
        sort -t "." -n -k1,1 -k2,2 -k3,3 -k4,4 |
        head -n 1)

    if [ "$right" = "$min_ver" ]; then
        return 0
    fi

    return 1
}

mkpkglist() {
    xbps-query -s '^/' --property repository --regex
}


## Sanity check
##

if ! command -v xbps-query >/dev/null; then
    printf >&2 "xbps-query not found, not a Void Linux system?\\n"
    exit 1
fi


## Command: built
## Display a list of packages built and installed locally
##

_do_built() {
    mkpkglist | while read -r n; do
        pkg=${n%: *}
        printf "%s\\n" "${pkg%-*}"
    done
}


## Command: updated
## Display a list of packages built and installed locally that
## require updates.
##

_do_updated() {
    cur_dir=$(pwd -P)

    if [ ! -f "$cur_dir/xbps-src" ]; then
        printf >&2 "%s: must be run in xbps-src directory.\\n" "$BASE_NAME"
        return 1
    fi

    mkpkglist | while read -r n; do
        n=${n%: *}
        pkg=${n%-*}

        cur_pkgver=$n
        cur_version=${cur_pkgver#"$pkg"-}
        cur_version=${cur_version%_*}
        cur_revision=${cur_pkgver#*_}

        if ! "$cur_dir"/xbps-src show "$pkg" \
             > "$TMP_DIR/${pkg}_new" \
             2>/dev/null; then
            printf >&2 "%s%s%s: %s -> %s\\n" \
                    "$T_BOLD" \
                    "$pkg" \
                    "$T_RESET" \
                    "$cur_pkgver" \
                    "not found"
            continue
        fi

        new_version=$(awk '/version:/ { print $2 }' < "$TMP_DIR/${pkg}_new")
        new_revision=$(awk '/revision:/ { print $2 }' < "$TMP_DIR/${pkg}_new")
        new_pkgver="${pkg}-${new_version}_${new_revision}"

        if [ -z "$new_version" ]; then
            printf >&2 "could not determine version of %s" "$n"
            continue
        fi

        if [ -z "$new_revision" ]; then
            printf >&2 "could not determine revision of %s" "$n"
            continue
        fi

        [ "$cur_pkgver" = "$new_pkgver" ] && continue
        ! version_gte "$new_version" "$cur_version" && continue
        ! version_gte "$new_revision" "$cur_revision" && continue

        printf >&2 "%s%s%s: %s -> %s\\n" \
                   "$T_BOLD" \
                   "$pkg" \
                   "$T_RESET" \
                   "$cur_pkgver" \
                   "$new_pkgver"
    done
}


## Glibc root manipulation
##

_do_glibc() {
    export XBPS_ARCH=x86_64

    command=$1; shift

    case "$command" in
        xbps-install )
            xbps-install \
                --repository=https://alpha.de.repo.voidlinux.org/current \
                --rootdir="$HOME"/.local/share/glibc \
                "$@"
            ;;

        xbps-* ) \
            "$command" \
                --rootdir="$HOME"/.local/share/glibc \
                "$@"
            ;;

        * )
            printf >&2 "%s: not xbps command?" "$BASE_NAME"
            return 1
            ;;
    esac

}


## Running
##

cmd=$(printf "%s" "$1" | tr -C '[:alnum:]' '_')

if [ -z "$cmd" ]; then
    printf >&2 "Usage: %s COMMAND [ARGS...]

A wrapper script to perform XBPS maintenance tasks.

COMMAND:

    built               display a locally built packages
    updated             display a locally built packages required updating
    glibc               invoke xbps commands in glibc root

" "$BASE_NAME"
    exit 2
fi

if [ "$(command -v "_do_${cmd}")x" = "x" ]; then
    printf >&2 "%s: unknown command %s\\n" "$(basename "$0")" "$cmd"
    exit 1
fi

shift
"_do_${cmd}" "$@"
exit $?
