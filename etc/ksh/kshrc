#!/usr/bin/env ksh
#
# ~/.kshrc
#

# Exit early for non-interactive shell
#
if [[ "$-" != *"i"* ]]; then
    return 0
fi


## History
##

HISTFILE="$HOME/.ksh_history"
HISTSIZE=10000

export HISTFILE
export HISTSIZE


## Platform
##

unset PLATFORM
unset OSID

PLATFORM=$(uname | tr '[:upper:]' '[:lower:]')

if [[ -f /etc/os-release ]]; then
    OSID=$(grep ^ID /etc/os-release | sed -E "s|.*=\"?([^\"]+)\"?|\1|")
fi


## GPG
##

if command -v gpg-connect-agent >/dev/null; then
    GPG_TTY=$(tty)
    export GPG_TTY

    gpg-connect-agent updatestartuptty /bye >/dev/null
fi


## PATHs
##

prependpath() {
    case ":$PATH:" in
        *:"$1":*)
            ;;

        * )
            PATH="${1:+$1:}$PATH"
            ;;
    esac
}

GOPATH=$HOME/Dev/go/gopath:$HOME/Dev
RUST_SRC_PATH="$HOME/.local/lib/rustlib/src/rust/src"

export GOPATH
export MANPATH
export RUST_SRC_PATH

prependpath "$HOME/.local/bin"
prependpath "$HOME/.cabal/bin"
prependpath "$HOME/.cargo/bin"
prependpath "$HOME/.nimble/bin"
prependpath "$HOME/.local/lib/google-cloud-sdk/bin"
prependpath "$HOME/.local/lib/pytools/bin"

_gopaths=$GOPATH

while true; do
    if [[ -z "$_gopaths" ]]; then
        break
    fi

    _gopath=${_gopaths%%:*}
    prependpath "$_gopath/bin"

    _gopaths=${_gopaths##$_gopath}
    _gopaths=${_gopaths#:}
done

unset _gopath
unset _gopaths

case "$(uname | tr '[:upper:]' '[:lower:]')" in
    darwin )
        prependpath /opt/local/bin

        if [ -f /usr/libexec/java_home ]; then
            JAVA_HOME=$(/usr/libexec/java_home)
            export JAVA_HOME
        fi

        for _pypath in "$HOME"/Library/Python/?.?/bin; do
            if [ -d "$_pypath" ]; then
                prependpath "$_pypath"
            fi
        done

        unset _pypath
        ;;
esac


## Local
##

if [[ -d "$HOME/.cache/rebar3/bin" ]]; then
    prependpath "$HOME/.cache/rebar3/bin"
fi

for rbpath in "$HOME"/.gem/ruby/?.?/bin; do
    if [ -d "$rbpath" ]; then
        prependpath "$rbpath"
    fi
done


## Prompt
##

__prompt() {
    if [[ "$(id -u)" == "0" ]]; then
        print \#
    else
        print \$
    fi
}

__prompt_git() {
    typeset _branch
    _branch=$(command git rev-parse --abbrev-ref HEAD 2>/dev/null)

    if [[ -n "$_branch" ]]; then
        command git status --porcelain=v2 2>/dev/null |
            awk \
                -v branch=$_branch \
                -v bold="$(tput bold 2>/dev/null || true)" \
                -v reset="$(tput sgr0 2>/dev/null || true)" \
                -v green="$(tput setaf 2 2>/dev/null || true)" \
                -v yellow="$(tput setaf 3 2>/dev/null || true)" \
                '
                BEGIN {
                    changed=0
                    staged=0
                }
                /^1 M./ { staged=1 }
                /^1 .M/ { changed=1 }
                /^[^1]/ { changed=1 }
                END {
                    printf "%s%s%s", bold, branch, reset
                    if (staged) { printf "%s%s", green, "*" }
                    if (changed) { printf "%s%s", yellow, "*" }
                    printf "%s ", reset
                }'
    fi
}

__prompt_pwd() {
    pwd | sed "s|^$HOME|~|; s|\([^[:punct:]]\)[^/]*/|\1/|g"
}

__prompt_hostname() {
    hostname
}

case "$TERM" in
    xterm* | rxvt* )
        export PS1='\
$(__prompt_hostname) \
$(__prompt_pwd) \
$(__prompt_git)\
$(__prompt) '
        ;;

    screen* )
        export PS1='\
$(__prompt_pwd) \
$(__prompt_git)\
$(__prompt) '
        ;;

    * )
        export PS1='$(__prompt) '
        ;;
esac

export PS1


## Utilities
##

if command -v colorls >/dev/null; then
    alias ls="command colorls -G"
elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
    alias ls="command ls --color"
elif command ls -G >/dev/null 2>&1; then
    alias ls="command ls -G"
fi

alias ll='ls -lh'
alias la='ls -alh'

if command -v podman >/dev/null && ! command -v docker >/dev/null; then
    alias docker="podman"
fi


# gg - jump to directory

gg() {
    typeset lscmd
    typeset dir

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    dir=$(
        find "$HOME/Dev/src" -type d \( -name .git -o -name .hg \) -prune |
            sort -u |
            awk '
                BEGIN { prev="" }
                {
                    # prevent subrepo from appearing in the list
                    r=match($1, "/\\.[a-zA-Z0-9]+$")
                    l=length($1)
                    cur=substr($1, 1, l-(l-r+1))
                    if (prev == "" || index(cur, prev) == 0) {
                        print cur
                        prev=cur
                    }
                }' |
            fzf --preview "$lscmd {}" -q "$*")

    if [ -z "$dir" ]; then
        return
    fi

    builtin cd "$dir"
}


# cd - with interactive menu

cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi

    typeset lscmd
    typeset dir

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    while true; do
        dir=$(command ls -a -p |
                  grep '/$' |
                  sed 's;/$;;' |
                  fzf --tac --preview "$lscmd {}")

        if [ -z "$dir" ]; then
            return
        fi

        builtin cd "$dir"
    done
}


## Cleanups
##

unset PLATFORM
unset OSID
unset prependpath
