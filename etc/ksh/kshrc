#!/usr/bin/env ksh
#
# ~/.kshrc
#

# Exit early for non-interactive shell
#
if [[ "$-" != *"i"* ]]; then
    return 0
fi


## History
##

HISTCONTROL="ignorespace"
HISTFILE="$HOME/.ksh_history"
HISTSIZE=10000

export HISTCONTROL
export HISTFILE
export HISTSIZE


## Platform
##

unset PLATFORM

PLATFORM=$(uname | tr '[:upper:]' '[:lower:]')


## GPG
##

if command -v gpg-connect-agent >/dev/null; then
    GPG_TTY=$(tty)
    export GPG_TTY

    gpg-connect-agent --no-autostart updatestartuptty /bye >/dev/null
fi


## PATHs
##

prependpath() {
    case ":$PATH:" in
        *:"$1":*)
            ;;

        * )
            PATH="${1:+$1:}$PATH"
            ;;
    esac
}

GOPATH=$HOME/Dev/go/gopath:$HOME/Dev
RUST_SRC_PATH="$HOME/.local/lib/rustlib/src/rust/src"

export GOPATH
export MANPATH
export RUST_SRC_PATH

prependpath "$HOME/.local/bin"
prependpath "$HOME/.cabal/bin"
prependpath "$HOME/.cargo/bin"
prependpath "$HOME/.nimble/bin"
prependpath "$HOME/.local/lib/google-cloud-sdk/bin"
prependpath "$HOME/.local/lib/pytools/bin"

_gopaths=$GOPATH

while true; do
    if [[ -z "$_gopaths" ]]; then
        break
    fi

    _gopath=${_gopaths%%:*}
    prependpath "$_gopath/bin"

    _gopaths=${_gopaths##$_gopath}
    _gopaths=${_gopaths#:}
done

unset _gopath
unset _gopaths

case "$PLATFORM" in
    darwin )
        prependpath /opt/local/bin

        if [ -f /usr/libexec/java_home ]; then
            JAVA_HOME=$(/usr/libexec/java_home)
            export JAVA_HOME
        fi

        for _pypath in "$HOME"/Library/Python/?.?/bin; do
            if [ -d "$_pypath" ]; then
                prependpath "$_pypath"
            fi
        done

        unset _pypath
        ;;
esac


## Local
##

if [[ -d "$HOME/.cache/rebar3/bin" ]]; then
    prependpath "$HOME/.cache/rebar3/bin"
fi

for rbpath in "$HOME"/.gem/ruby/?.?/bin; do
    if [ -d "$rbpath" ]; then
        prependpath "$rbpath"
    fi
done


## Prompt
##

__prompt() {
    if [[ "$(id -u)" == "0" ]]; then
        print \#
    else
        print \$
    fi
}

__prompt_git() {
    typeset _branch
    _branch=$(command git rev-parse --abbrev-ref HEAD 2>/dev/null)

    if [[ -n "$_branch" ]]; then
        command git status --porcelain=v2 2>/dev/null |
            awk \
                -v branch="$_branch" \
                -v bold="\\\[$(tput bold 2>/dev/null || true)\\\]" \
                -v reset="\\\[$(tput sgr0 2>/dev/null || true)\\\]" \
                -v green="\\\[$(tput setaf 2 2>/dev/null || true)\\\]" \
                -v yellow="\\\[$(tput setaf 3 2>/dev/null || true)\\\]" \
                '
                BEGIN {
                    changed=0
                    staged=0
                }
                /^1 M./ { staged=1 }
                /^1 .M/ { changed=1 }
                /^[^1]/ { changed=1 }
                END {
                    printf "%s%s%s", bold, branch, reset
                    if (staged) { printf "%s%s", green, "*" }
                    if (changed) { printf "%s%s", yellow, "*" }
                    printf "%s ", reset
                }'
    fi
}

__prompt_pwd() {
    pwd | sed "
s|^$HOME|~|;                                  # $HOME -> ~
s|\([^[:punct:]]\)[^/]*/|\1/|g;               # foo/bar/baz -> f/b/baz
s|^\(././\)././././.*/\(./[^/]*\)$|\1…/\2|g;  # 1/2/3/4/5/6/7/8/9/10 -> 1/…/9/10
"
}

__prompt_hostname() {
    hostname
}

case "$TERM" in
    xterm* | rxvt* )
        PS1="\
$(__prompt_hostname) \
\$(__prompt_pwd) \
\$(__prompt_git)\
$(__prompt) "
        ;;

    screen* )
        PS1="\
\$(__prompt_pwd) \
\$(__prompt_git)\
$(__prompt) "
        ;;

    * )
        PS1="$(__prompt) "
        ;;
esac

PS1="\[\r$(tput dl1 2>/dev/null || true)\]$PS1"

export PS1


## Utilities
##

if command -v colorls >/dev/null; then
    alias ls="command colorls -G"
elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
    alias ls="command ls --color"
elif command ls -G >/dev/null 2>&1; then
    alias ls="command ls -G"
fi

alias ll='ls -lh'
alias la='ls -alh'

if command -v podman >/dev/null && ! command -v docker >/dev/null; then
    alias docker="podman"
fi


# gg - jump to directory

gg() {
    typeset lscmd
    typeset dir
    typeset codedirs

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    if command -v git >/dev/null; then
        for s in $(git config --get-all ghq.root); do
            s=$(eval -- builtin cd "$s" 2>/dev/null || return 1; pwd -P)
            if [[ -n "$s" ]]; then
                codedirs[${#codedirs[*]}]="${s}"
            fi
        done
    fi

    if [[ "${#codedirs[*]}" -lt 1 ]]; then
        codedirs[0]=$HOME/src
    fi

    dir=$(
        find "${codedirs[@]}" \
                \( \
                    -exec test -d '{}'/.git \; \
                    -or -exec test -d '{}'/.hg \; \
                \) \
                -print \
                -prune |
            sort -u |
            fzf --preview "$lscmd {}" -q "$*")

    if [ -z "$dir" ]; then
        return
    fi

    builtin cd "$dir" || return 1
}


# gq - quickly clone or jump to repo

gq() {
    typeset repo
    typeset repo_c
    typeset repodir
    typeset repotype
    typeset codedirs

    repo=$1

    if [ -z "$repo" ]; then
        printf >&2 "Usage: gq REPO\\n"
        return 2
    fi

    if command -v git >/dev/null; then
        for s in $(git config --get-all ghq.root); do
            s=$(eval -- builtin cd "$s" 2>/dev/null || return 1; pwd -P)
            if [[ -n "$s" ]]; then
                codedirs[${#codedirs[*]}]="${s}"
            fi
        done
    fi

    if [[ "${#codedirs[*]}" -lt 1 ]]; then
        codedirs[0]=$HOME/src
    fi

    case "$repo" in
        *.git ) repotype=git;;
        *.hg ) repotype=git;;
        *hg.sr.ht* ) repotype=hg;;
        *bitbucket.com* ) repotype=hg;;
        *bitbucket.org* ) repotype=hg;;
        * ) repotype=git;;
    esac

    if [[ "$repo" != *"://"* && "$repo" != *"@"* ]]; then
        repo=https://$repo
    fi

    repo_c=$(echo "$repo" |
                   sed '
                       s|~||;
                       s|^.*://||;
                       s|^\w*@||;
                       s|.hg$||;
                       s|.git$||')

    for s in "${codedirs[@]}"; do
        if [ -d "$s/$repo_c" ]; then
            builtin cd "$s/$repo_c" || return 1
            return 0
        fi
    done

    repodir=${codedirs[0]}/$repo_c

    (
        typeset st
        typeset basedir
        typeset basedir_p

        st=0
        basedir=$(dirname "$repodir")

        mkdir -p "$basedir"
        cd "$basedir" || return 1

        case "$repotype" in
            git ) git clone "$repo" || st=1;;
            hg ) hg clone "$repo" || st=1;;
        esac

        # Cleanup in case cloning failed; we cannot use trap here
        # since git/hg may return non-standard exit codes.
        if [[ "$st" == "1" ]]; then
            basedir=$repodir
            while [[ "$basedir" != "${codedirs[0]}" ]]; do
                rmdir "$basedir" 2>/dev/null || true
                basedir_p=${basedir##*/}
                basedir=${basedir%%/$basedir_p}
            done
        fi

        return $st
    ) || return 1

    builtin cd "$repodir" || return 1
}


# cd - with interactive menu

cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@" || return 1
        return
    fi

    typeset lscmd
    typeset dir

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 |grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    while true; do
        dir=$(command ls -a -p |
                  grep '/$' |
                  sed 's;/$;;' |
                  fzf --tac --preview "$lscmd {}")

        if [ -z "$dir" ]; then
            return
        fi

        builtin cd "$dir" || return 1
    done
}


# shp - search history into prompt

__shp() {
    typeset cmd

    if [[ ! -f "$HISTFILE" ]]; then
        return
    fi

    cmd=$(command fc -l 1 |
              sed 's|^\s*[0-9]*\s*||' |
              fzf +s --tac -q "$*")

    if [[ -z "$cmd" ]] && [[ -z "$*" ]]; then
        return
    fi

    cmd=${cmd:-$*}

    python3 -c "
import fcntl, sys, termios
for c in ' '.join(sys.argv[1:]):
    fcntl.ioctl(sys.stdin, termios.TIOCSTI, c)
" "$cmd"
}

__shp_silent() {
    printf "%s" "$(tput cuu 1 2>/dev/null || true)"
    printf "%s" "$(tput el 2>/dev/null || true)"
    __shp "$@"
}

if [[ "$PLATFORM" != "openbsd" ]] && command -v python3 >/dev/null; then
    bind -m '^R'='^A __shp_silent ^J'
fi


## Hooks
##

_cleanup_ksh_history() {
    tmphist=$(mktemp)

    if [[ ! -f "$HISTFILE" ]]; then
        return
    fi

    awk '!a[$0] { a[$0]++; print $0 }' < "$HISTFILE" |
        grep -v \
             -e '\\\s*$' \
             -e '^ ' \
             -e '^\$' \
             -e '^apropos\s*' \
             -e '^cat\s*' \
             -e '^cccccc' \
             -e '^cd [^\~/]' \
             -e '^cd\s*$' \
             -e '^chmod\s*' \
             -e '^doas\s*' \
             -e '^echo\s*' \
             -e '^gg\s*$' \
             -e '^ll\s*' \
             -e '^ls\s*' \
             -e '^man\s*' \
             -e '^mv\s*' \
             -e '^ps\s*' \
             -e '^rm\s*' \
             -e '^ssh-keyscan\s*' \
             -e '^ssh\s*' \
             -e '^sudo\s*' \
             -e '^}\s*' \
             -e '{\s*$' \
             -e '|\s*grep\s*' \
             -e '|\s*less\s*' \
             > "$tmphist"
    mv "$tmphist" "$HISTFILE"
}

__hook_exit() {
    _cleanup_ksh_history
}

trap '__hook_exit' EXIT


## Cleanups
##

unset PLATFORM
unset prependpath
