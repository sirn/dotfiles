#!/usr/bin/env ksh
#
# ~/.kshrc
#

# Exit early for non-ksh; non-ksh may also read this file and they becomes
# confused when encountered ksh syntaxes like typeset.
#

case "$0" in
*ksh) ;;

*)
    PS1='\$ '
    return 0
    ;;
esac

# Exit early for non-interactive shell
#

case "$-" in
*"i"*) ;;

*)
    return 0
    ;;
esac

## History
##

HISTCONTROL="ignorespace"
HISTFILE="$HOME/.ksh_history"
HISTSIZE=10000

export HISTCONTROL
export HISTFILE
export HISTSIZE

## GPG
##

if command -v gpg-connect-agent >/dev/null; then
    GPG_TTY=$(tty)
    export GPG_TTY

    # Don't start GPG agent if we're not in WSL; in a non-WSL environment
    # gpg-agent should be managed externally, e.g. via runit or launchd, etc.
    GPG_ARGS=
    if [ ! -f /proc/version ] || grep -qvi microsoft /proc/version; then
        GPG_ARGS="--no-autostart"
    fi

    gpg-connect-agent $GPG_ARGS updatestartuptty /bye >/dev/null
    unset GPG_ARGS
fi

## Prompt
##

__prompt() {
    if [ "$(id -u)" = "0" ]; then
        print \#
    else
        print \$
    fi
}

__prompt_git() {
    typeset _branch
    _branch=$(command git rev-parse --abbrev-ref HEAD 2>/dev/null)

    if [ -n "$_branch" ]; then
        command git status --porcelain=v2 2>/dev/null |
            awk \
                -v branch="$_branch" \
                -v bold="\\\[$(tput bold 2>/dev/null || true)\\\]" \
                -v reset="\\\[$(tput sgr0 2>/dev/null || true)\\\]" \
                -v green="\\\[$(tput setaf 2 2>/dev/null || true)\\\]" \
                -v yellow="\\\[$(tput setaf 3 2>/dev/null || true)\\\]" \
                '
                BEGIN {
                    changed=0
                    staged=0
                }
                /^1 M./ { staged=1 }
                /^1 .M/ { changed=1 }
                /^[^1]/ { changed=1 }
                END {
                    printf "%s%s%s", bold, branch, reset
                    if (staged) { printf "%s%s", green, "*" }
                    if (changed) { printf "%s%s", yellow, "*" }
                    printf "%s ", reset
                }'
    fi
}

__prompt_pwd() {
    pwd | sed "
s|^$HOME|~|;                                    # $HOME -> ~
s|\([^[:punct:]]\)[^/]*/|\1/|g;                 # foo/bar/baz -> f/b/baz
s|^\(././\)././././.*/\(./[^/]*\)$|\1.../\2|g;  # 1/2/3/4/5/6/7/8/9/10 -> 1/.../9/10
"
}

__prompt_hostname() {
    # Some BSDs doesn't support hostname -s, we're doing this manually.
    typeset short_hostname
    short_hostname=$(hostname)
    printf "%s" "${short_hostname%%.*}"
}

__prompt_last_exit() {
    typeset last_exit=$?
    typeset format_code=

    if [ "$last_exit" == 1 ]; then
        format_code=$(tput setab 1 2>/dev/null || true)
    elif [ "$last_exit" != 0 ]; then
        format_code=$(tput setab 3 2>/dev/null || true)
    fi

    if [ -n "$format_code" ]; then
        printf \
            "%s%s%s " \
            "\\[$format_code\\]" \
            "$last_exit" \
            "\\[$(tput sgr0 2>/dev/null || true)\\]"
    fi
}

__prompt_nix() {
    typeset t_bold t_reset t_highlight
    t_bold=$(tput bold 2>/dev/null || true)
    t_reset=$(tput sgr0 2>/dev/null || true)
    t_highlight=$(tput setaf 2 2>/dev/null || true)
    if [ -n "$IN_NIX_SHELL" ]; then
        printf \
            "%s[%s]%s " \
            "\\[$t_highlight$t_bold\\]" \
            "nix-shell" \
            "\\[$t_reset\\]"
    fi
}

case "$TERM" in
xterm* | rxvt*)
    PS1="\
$(__prompt_nix)\
$(__prompt_hostname) \
\$(__prompt_pwd) \
\$(__prompt_git)\
\$(__prompt_last_exit)\
$(__prompt) "
    ;;

screen*)
    PS1="\
$(__prompt_nix)\
\$(__prompt_pwd) \
\$(__prompt_git)\
\$(__prompt_last_exit)\
$(__prompt) "
    ;;

*)
    PS1="$(__prompt_nix)\$(__prompt_last_exit)$(__prompt) "
    ;;
esac

# shellcheck disable=SC2089
PS1="\["'$(printf "%$((COLUMNS-1))s\r")'"\]$PS1"

## Utilities
##

if command -v colorls >/dev/null; then
    alias ls="command colorls -G"
elif command ls --version 2>&1 | grep -qe "BusyBox" -e "GNU"; then
    alias ls="command ls --color"
elif command ls -G >/dev/null 2>&1; then
    alias ls="command ls -G"
fi

alias ll='ls -lh'
alias la='ls -alh'
alias sshi='ssh -o StrictHostKeyChecking=ask -o UserKnownHostsFile=/dev/null'
alias rsynci='rsync -e "ssh -o StrictHostKeyChecking=ask -o UserKnownHostsFile=/dev/null"'

if command -v podman >/dev/null && ! command -v docker >/dev/null; then
    alias docker="podman"
fi

# gg - jump to directory

gg() {
    typeset lscmd
    typeset dir
    typeset codedirs

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 | grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    if command -v git >/dev/null; then
        for s in $(git config --get-all ghq.root); do
            s=$(
                eval -- builtin cd "$s" 2>/dev/null || return 1
                pwd -P
            )
            if [ -n "$s" ]; then
                codedirs[${#codedirs[*]}]="${s}"
            fi
        done
    fi

    if [ "${#codedirs[*]}" -lt 1 ]; then
        codedirs[0]=$HOME/src
    fi

    # Note: command should match with `gemacs--project-sync' in
    # `etc/elisp/packages/editor-project.el'.
    dir=$(
        find "${codedirs[@]}" \
            -not -path '*/node_modules/*' \
            -not -path '*/vendor/*' \
            \( \
            -exec test -d '{}'/.git \; \
            -or -exec test -d '{}'/.hg \; \
            \) \
            -print \
            -prune |
            sort -u |
            fzf --preview "$lscmd {}" -q "$*"
    )

    if [ -z "$dir" ]; then
        return
    fi

    builtin cd "$dir" || return 1
}

# gq - quickly clone or jump to repo

gq() {
    typeset repo
    typeset repo_c
    typeset repodir
    typeset repotype
    typeset codedirs

    repo=$1

    if [ -z "$repo" ]; then
        printf >&2 "Usage: gq REPO\\n"
        return 2
    fi

    if command -v git >/dev/null; then
        for s in $(git config --get-all ghq.root); do
            s=$(
                eval -- builtin cd "$s" 2>/dev/null || return 1
                pwd -P
            )
            if [ -n "$s" ]; then
                codedirs[${#codedirs[*]}]="${s}"
            fi
        done
    fi

    if [ "${#codedirs[*]}" -lt 1 ]; then
        codedirs[0]=$HOME/src
    fi

    case "$repo" in
    *.git) repotype=git ;;
    *.hg) repotype=hg ;;
    *//hg.* | hg.*) repotype=hg ;;
    *bitbucket.com*) repotype=hg ;;
    *bitbucket.org*) repotype=hg ;;
    *) repotype=git ;;
    esac

    case "$repo" in
    *"://"*) ;;
    *"@"*) ;;
    *)
        repo=https://$repo
        ;;
    esac

    repo_c=$(echo "$repo" |
        sed -E '
                       s|~||;
                       s|^.*://||;
                       s|^.*@||;
                       s|:[0-9]+/|/|;
                       s|.hg$||;
                       s|.git$||')

    for s in "${codedirs[@]}"; do
        if [ -d "$s/$repo_c" ]; then
            builtin cd "$s/$repo_c" || return 1
            return 0
        fi
    done

    repodir=${codedirs[0]}/$repo_c

    (
        typeset st
        typeset basedir
        typeset basedir_p

        st=0
        basedir=$(dirname "$repodir")

        mkdir -p "$basedir"
        cd "$basedir" || return 1

        case "$repotype" in
        git) git clone --recurse-submodules "$repo" || st=1 ;;
        hg) hg clone "$repo" || st=1 ;;
        esac

        # Cleanup in case cloning failed; we cannot use trap here
        # since git/hg may return non-standard exit codes.
        if [ "$st" = "1" ]; then
            basedir=$repodir
            while [ "$basedir" != "${codedirs[0]}" ]; do
                rmdir "$basedir" 2>/dev/null || true
                basedir_p=${basedir##*/}
                basedir=${basedir%%/$basedir_p}
            done
        fi

        return $st
    ) || return 1

    builtin cd "$repodir" || return 1
}

# cd - with interactive menu

cd() {
    if [ "$#" != 0 ]; then
        builtin cd "$@" || return 1
        return
    fi

    typeset lscmd
    typeset dir

    if command -v colorls >/dev/null; then
        lscmd="command colorls -G -p"
    elif command ls --version 2>&1 | grep -qe "BusyBox" -e "GNU"; then
        lscmd="command ls --color -p"
    elif command ls -G >/dev/null 2>&1; then
        lscmd="command ls -Gp"
    fi

    while true; do
        dir=$(command ls -a -p |
            grep '/$' |
            sed 's;/$;;' |
            fzf --tac --preview "$lscmd {}")

        if [ -z "$dir" ]; then
            return
        fi

        builtin cd "$dir" || return 1
    done
}
